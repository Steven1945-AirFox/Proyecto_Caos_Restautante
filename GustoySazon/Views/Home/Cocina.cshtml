@model GustoySazon.Models.CocinaViewModel

@{
    ViewData["Title"] = "Panel Cocina";
    Layout = null;
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <title>Panel Cocina</title>
    <style>
        body {
            font-family: 'Segoe UI', sans-serif;
            margin: 0;
            background: #fef6ec;
            color: #333;
        }

        .container {
            padding: 30px;
            max-width: 1200px;
            margin: auto;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: #fff;
            padding: 15px 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            border-radius: 10px;
        }

        .indicadores {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }

        .indicador {
            background: #fff;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .barra {
            height: 12px;
            margin-top: 8px;
            border-radius: 6px;
            transition: width 0.5s ease-in-out;
        }

        .rojo {
            background: #dc3545;
        }

        .verde {
            background: #28a745;
        }

        .azul {
            background: #007bff;
        }

        .naranja {
            background: #fd7e14;
        }

        .morado {
            background: #6f42c1;
        }

        .alertas, .resumen {
            display: flex;
            justify-content: space-between;
            gap: 20px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .alerta, .resumen-card {
            flex: 1;
            background: #fff;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .resumen-card {
            min-width: 180px;
            text-align: center;
            font-weight: bold;
        }

            .resumen-card.verde {
                background: #d4edda;
                color: #155724;
            }

            .resumen-card.morado {
                background: #e2d6f8;
                color: #4b0082;
            }

            .resumen-card.naranja {
                background: #ffe5b4;
                color: #d35400;
            }

            .resumen-card.rojo {
                background: #f8d7da;
                color: #721c24;
            }

            .resumen-card.azul {
                background: #d1ecf1;
                color: #0c5460;
            }

        .tabs {
            margin-bottom: 30px;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

            .tabs button {
                background: #343a40;
                color: white;
                border: none;
                padding: 10px 16px;
                border-radius: 6px;
                cursor: pointer;
                transition: background 0.3s;
            }

                .tabs button:hover {
                    background: #495057;
                }

        .cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
        }

        .card {
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            background: #fff;
        }

            .card:hover {
                transform: translateY(-6px);
                box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
            }

            .card.vacio {
                text-align: center;
                color: #777;
            }

        .btn-uso {
            background: #faeff5;
            border: 1px solid #999;
            border-radius: 5px;
            padding: 5px 10px;
            margin-top: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .btn-uso:hover {
                transform: scale(1.05);
                background: #f0d8e2;
            }

        .temp-icon {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            margin-top: 10px;
            color: #28a745;
            font-weight: bold;
        }

        #ordenesSection, #equiposSection, #ingredientesSection, #comunicacionSection, #emergenciaSection {
            display: none;
        }

            #ordenesSection.active, #equiposSection.active, #ingredientesSection.active, #comunicacionSection.active, #emergenciaSection.active {
                display: grid;
            }

        .tabla-ingredientes {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

            .tabla-ingredientes th, .tabla-ingredientes td {
                border: 1px solid #ccc;
                padding: 12px;
                text-align: left;
            }

            .tabla-ingredientes th {
                background: #e0f7fa;
                color: #00796b;
                font-weight: bold;
            }










        /* Estilo mejorado para la tabla de órdenes */
        .tabla-ordenes-cocina {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin: 20px 0;
            font-size: 14px;
            background: #fff;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

            /* Encabezados con color pastel suave */
            .tabla-ordenes-cocina thead {
                background: linear-gradient(135deg, #a8e6cf, #dcedc1);
                color: #2c3e50;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                font-weight: 600;
            }

            .tabla-ordenes-cocina th {
                padding: 15px;
                text-align: left;
                font-weight: 600;
                border-bottom: 2px solid #fff;
            }

            /* Efecto hover para filas */
            .tabla-ordenes-cocina tbody tr {
                transition: all 0.2s ease;
            }

                .tabla-ordenes-cocina tbody tr:hover {
                    background-color: #f5f9f7;
                }

            .tabla-ordenes-cocina td {
                padding: 12px 15px;
                border-bottom: 1px solid #e8f4ea;
                vertical-align: middle;
            }

            .tabla-ordenes-cocina tbody tr:last-child td {
                border-bottom: none;
            }

        /* Estilos mejorados para los estados */
        .estado-pendiente {
            background-color: #fff8e1;
            color: #ff8f00;
            padding: 5px 12px;
            border-radius: 20px;
            font-weight: 500;
            display: inline-block;
            font-size: 13px;
        }

        .estado-preparacion {
            background-color: #e3f2fd;
            color: #1976d2;
            padding: 5px 12px;
            border-radius: 20px;
            font-weight: 500;
            display: inline-block;
            font-size: 13px;
        }

        .estado-listo {
            background-color: #e8f5e9;
            color: #388e3c;
            padding: 5px 12px;
            border-radius: 20px;
            font-weight: 500;
            display: inline-block;
            font-size: 13px;
        }

        /* Botón con color pastel armónico */
        .btn-marcar-listo {
            background-color: #b2dfdb;
            color: #00695c;
            border: none;
            padding: 8px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            font-size: 13px;
        }

            .btn-marcar-listo:hover {
                background-color: #80cbc4;
                transform: translateY(-1px);
                box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
            }

            .btn-marcar-listo:active {
                transform: translateY(0);
            }

        /* Ícono de listo */
        .icono-listo {
            color: #4caf50;
            font-size: 16px;
            font-weight: 500;
        }

        /* Mensaje cuando no hay órdenes */
        .sin-ordenes {
            text-align: center;
            padding: 25px;
            color: #78909c;
            font-style: italic;
            background-color: #fafafa;
        }

        /* Efecto sutil para filas pares */
        .tabla-ordenes-cocina tbody tr:nth-child(even) {
            background-color: #f8fbfa;
        }
    </style>
    @*PARTE AGREGADA POR MARLON NO TOCAR*@
    @*PARTE AGREGADA POR MARLON NO TOCAR*@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.0/jquery.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
    <script src="/signalr/hubs"></script>
    @*ACA TERMINA LO DE MARLON*@

</head>
<body>
    <div class="container">
        <div class="header">
            <h2>Chef: Josue Waterhouse</h2>
            <img src="https://cdn-icons-png.flaticon.com/512/2922/2922065.png" width="50" />
        </div>

        <div class="alertas">
            <div class="alerta">
                🔥 Temperatura Cocina: @Model.Temperatura°C<br />
                <small>(@(Model.Temperatura > 45 ? "Demasiado caliente" : "Normal"))</small>
            </div>
            <div class="alerta">
                🌫️ Nivel de Humo: @Model.Humo%<br />
                <small>(@(Model.Humo > 80 ? "Mucho humo" : "Nivel normal"))</small>
            </div>
        </div>

        <h3>📊 Rendimiento del Turno</h3>
        <div class="resumen">
            <div class="resumen-card verde">Órdenes Completadas<br /><strong>@(Model.OrdenesCompletadas == 0 ? "-" : Model.OrdenesCompletadas.ToString())</strong></div>
            <div class="resumen-card morado">Calidad Promedio<br /><strong>@(Model.CalidadPromedio == 0 ? "-" : Model.CalidadPromedio + "%")</strong></div>
            <div class="resumen-card naranja">Horas Trabajadas<br /><strong>@(Model.HorasTrabajadas == 0 ? "-" : Model.HorasTrabajadas + "h")</strong></div>
            <div class="resumen-card rojo">Nivel de Estrés<br /><strong>@Model.Estres%</strong></div>
            <div class="resumen-card azul">Órdenes Pendientes<br /><strong>@(Model.OrdenesPendientes == 0 ? "-" : Model.OrdenesPendientes.ToString())</strong></div>
        </div>

        @*ACA INICIA LO DE MARLON*@
        <div id="evento-activo" style="display:none; background:#fff3cd; border-left:5px solid #ffc107; padding:16px; margin-bottom:20px; border-radius:8px; font-weight:bold;">
            🚨 Evento activo: <span id="titulo-evento">---</span>

            <div class="indicadores" style="margin-top: 15px;">
                <div class="indicador"><span>🥵 Estrés</span><div class="barra rojo" style="width:@($"{Model.Estres}%")"></div></div>
                <div class="indicador"><span>⚡ Energía</span><div class="barra verde" style="width:@($"{Model.Energia}%")"></div></div>
                <div class="indicador"><span>🧠 Concentración</span><div class="barra azul" style="width:@($"{Model.Concentracion}%")"></div></div>
                <div class="indicador"><span>🔥 Riesgo Quemado</span><div class="barra naranja" style="width:@($"{Model.RiesgoQuemado}%")"></div></div>
                <div class="indicador"><span>📏 Calidad</span><div class="barra morado" style="width:@($"{Model.Calidad}%")"></div></div>
            </div>
        </div>

        <!-- 🔥 Contenedor de soluciones en tiempo real -->
        <div id="contenedor-soluciones" class="cards" style="margin-top: 30px; margin-bottom: 30px;">
            <div class="card vacio">No hay soluciones activas en este momento.</div>
        </div>

        @*ACA TERMINA LO DE MARLON*@

        <div class="tabs">
            <button onclick="showTab('ordenes')">Órdenes</button>
            <button onclick="showTab('equipos')">Equipos</button>
            <button onclick="showTab('ingredientes')">Ingredientes</button>
            <button onclick="showTab('comunicacion')">Comunicación</button>
            <button onclick="showTab('emergencia')">Emergencia</button>
        </div>

        <!-- ÓRDENES -->
        <!--Modificado por Steven -->
        <div id="ordenesSection" class="cards active">
            <table class="tabla-ordenes-cocina">
                <thead>
                    <tr>
                        <th>Mesa</th>
                        <th>Platillo</th>
                        <th>Cantidad</th>
                        <th>Precio Total</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Ordenes != null && Model.Ordenescocina.Any())
                    {
                        foreach (var orden in Model.Ordenescocina)
                        {
                            <tr>
                                <td>@orden.MesaId</td>
                                <td>@orden.NombreComida</td>
                                <td>@orden.Cantidad</td>
                                <td>@orden.PrecioTotal.ToString("C")</td>
                                <td>
                                    @if (orden.Estado == "Pendiente")
                                    {
                                        <span class="estado-pendiente">@orden.Estado</span>
                                    }
                                    else if (orden.Estado == "En preparación")
                                    {
                                        <span class="estado-preparacion">@orden.Estado</span>
                                    }
                                    else
                                    {
                                        <span class="estado-listo">@orden.Estado</span>
                                    }
                                </td>
                                <td>
                                    @if (orden.Estado != "Platillo Listo")
                                    {
                                        <button class="btn-marcar-listo" onclick="marcarComoListo(@orden.Id)" data-orden-id="@orden.Id">Cocinar</button>
                                    }
                                    else
                                    {
                                        <span class="icono-listo">✅ Listo</span>
                                    }
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="sin-ordenes">No hay órdenes activas por ahora.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- EQUIPOS -->
        <div id="equiposSection" class="cards">
            @for (int i = 1; i <= 3; i++)
            {
                var nombre = i == 1 ? "Parrillada Principal" : i == 2 ? "Freidora" : "Parrillada Secundaria";
                var estado = i == 3 ? "Roto" : "Funcionando";
                var capacidadUsada = 0;
                var capacidadTotal = 5;
                var temperatura = i == 3 ? 0 : (i == 1 ? 200 : 180);
                var bgColor = i == 3 ? "#f8d7da" : "#d4edda";
                var porcentaje = capacidadTotal == 0 ? 0 : (capacidadUsada * 100) / capacidadTotal;

                <div class="card" style="background:@bgColor">
                    <h4>@nombre</h4>
                    <p><strong>Estado:</strong> @estado</p>
                    <p><strong>Capacidad:</strong> @capacidadUsada/@capacidadTotal</p>
                    <div class="barra" style="background:black; width:@porcentaje%"></div>
                    <button class="btn-uso">Usar</button>
                    <div class="temp-icon">
                        <img src="https://cdn-icons-png.flaticon.com/512/2991/2991115.png" width="24" />
                        @temperatura°C
                    </div>
                </div>
            }
        </div>

        <!-- INGREDIENTES -->
        <div id="ingredientesSection" class="cards">
            <table class="tabla-ingredientes">
                <tr><th>Ingrediente</th><th>Cantidad</th></tr>
            </table>
        </div>

        <!-- COMUNICACIÓN -->
        <div id="comunicacionSection" class="cards">
            <div class="card">
                <h4>📢 Comunicación con Meseros</h4>
                <p>📣 Mesa 1 lista para recoger</p>
                <p>⏰ Mesa 3 tardará 5 minutos más</p>
                <p>🔥 Problema en la parrilla principal</p>
                <button class="btn-uso">Llamar a meseros</button>
            </div>

            <div class="card">
                <h4>📢 Comunicación con Gerencia</h4>
                <ol>
                    <li>Equipos de cocina necesitan reparación</li>
                    <li>Ingredientes agotados</li>
                    <li>Falta de personal</li>
                </ol>
                <button class="btn-uso">Llamar a Gerencia</button>
            </div>
        </div>

        <!-- EMERGENCIA -->
        <div id="emergenciaSection" class="cards">
            <div class="card" style="background: #fde2e2;">
                <h4 style="color: #cc0000;">Situación Crítica</h4>
                <button class="btn-uso">Al borde del colapso</button>
                <button class="btn-uso">Tomar Descanso</button>
                <button class="btn-uso">Limitar Menú</button>
            </div>
            <div class="card" style="background: #f8cfcf;">
                <h4 style="color: #b30000;">Situación Extrema</h4>
                <button class="btn-uso">Pedir permiso para ir a casa</button>
                <button class="btn-uso">Pedir asistencia Médica</button>
                <button class="btn-uso" style="background: #cc0000; color: white;">Abandonar la Cocina</button>
            </div>
        </div>
    </div>

    <script>
		// Función para mostrar pestañas
		function showTab(tab) {
			const tabs = ["ordenesSection", "equiposSection", "ingredientesSection", "comunicacionSection", "emergenciaSection"];
			tabs.forEach(id => document.getElementById(id).classList.remove("active"));
			document.getElementById(tab + "Section").classList.add("active");
		}

		// SignalR conexión (Marlon)
		const hubConnection = $.hubConnection();
		const solucionHub = hubConnection.createHubProxy('solucionHub');

		solucionHub.on("MostrarSoluciones", function (categoria, eventoId, titulo, soluciones) {
			if (categoria === "cocina") {
				mostrarTarjetasSolucion(eventoId, titulo, soluciones);
			}
		});

		solucionHub.on("SolucionSeleccionada", function (eventoId, severidad) {
			console.log("✅ Solución confirmada para evento:", eventoId);
			document.getElementById("contenedor-soluciones").innerHTML = '';
		});

		hubConnection.start().done(function () {
			console.log("✅ Conectado como cocina");
		});

		function mostrarTarjetasSolucion(eventoId, titulo, soluciones) {
			const mensajeEvento = document.getElementById("evento-activo");
			if (mensajeEvento) {
				mensajeEvento.style.display = 'block';
				const tituloEventoSpan = document.getElementById("titulo-evento");
				if (tituloEventoSpan) {
					tituloEventoSpan.textContent = titulo;
				}
			}

			const contenedor = document.getElementById("contenedor-soluciones");
			contenedor.innerHTML = '';

			if (!Array.isArray(soluciones)) {
				console.error("❌ 'soluciones' no es un array válido:", soluciones);
				contenedor.innerHTML = `<div class="card" style="background: #fff3cd; border-left: 5px solid #ffc107; padding: 16px;">
					<strong>Advertencia:</strong> No se pudieron cargar las soluciones para el evento <em>${titulo}</em>.
				</div>`;
				return;
			}

			soluciones.forEach(s => {
				const card = document.createElement("div");
				card.className = "card";
				card.style = "border-left: 5px solid #007bff; background: #ffffff; margin-bottom: 20px;";
				card.innerHTML = `
					<h3 style="color: #007bff; margin-bottom: 8px;">🚨 ${titulo}</h3>
					<p><strong>${s.severity?.toUpperCase() || ''}</strong>: ${s.text || ''}</p>
					<button onclick="confirmarSolucion('${eventoId}', '${s.severity}')"
							style="margin-top: 10px; background: #007bff; color: white; padding: 8px 12px; border: none; border-radius: 5px; cursor: pointer;">
						Aplicar Solución
					</button>
				`;
				contenedor.appendChild(card);
			});
		}

		function confirmarSolucion(eventoId, severidad) {
			solucionHub.invoke("ConfirmarSolucion", eventoId, severidad)
				.done(() => {
					alert("✅ Solución enviada");
					document.getElementById("contenedor-soluciones").innerHTML = '';
				})
				.fail(err => {
					console.error("❌ Error al enviar solución:", err);
				});
		}

		// Función para marcar orden como lista con temporizador y cambio de botón
		function marcarComoListo(ordenId) {
			const boton = document.querySelector(`button[data-orden-id='${ordenId}']`);
			if (boton) {
				boton.disabled = true;
				boton.textContent = "Cocinando...";
			}

			// Tiempo aleatorio entre 15 y 60 segundos
			const tiempoEspera = Math.floor(Math.random() * (60 - 15 + 1)) + 15;

			setTimeout(function () {
				$.ajax({
					url: '@Url.Action("MarcarOrdenComoLista", "Home")',
					type: 'POST',
					data: { id: ordenId },
					success: function (response) {
						if (response.success) {
							location.reload();
						} else {
							alert('Error: ' + response.message);
							if (boton) {
								boton.disabled = false;
								boton.textContent = "Cocinar";
							}
						}
					},
					error: function () {
						alert('Error al comunicarse con el servidor');
						if (boton) {
							boton.disabled = false;
							boton.textContent = "Cocinar";
						}
					}
				});
			}, tiempoEspera * 1000);
		}
    </script>

</body>
</html>